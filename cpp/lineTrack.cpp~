#ifndef OPENCV_LIB
#define OPENCV_LIB

#include <iostream>                        // std::cout
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <math.h>
#include <vector>

using namespace std;
using namespace cv;

#endif

//#define time
#define LINUX

#include "GUI.h"
#include "LineFinder.h"

int main(void){
	//Dimentions of Capture window
	int scale = 4;
	int width = 640/scale;
	int height = 480/scale;
	int lineSize;
	unsigned int start_time,stop_time;
	//Open capture device
	int device = 0; //assume we want first device
	
	bool gui = true;
	bool record = false;

	//create video capture device, set capture area
	VideoCapture capture = VideoCapture(device);
	capture.open(device);
	//capture.set(CV_CAP_PROP_FRAME_WIDTH,width);
	//capture.set(CV_CAP_PROP_FRAME_HEIGHT,height);
	
	
	//create recording object
    #ifdef RECORD
	VideoWriter *recorder;
	recorder = new VideoWriter ("test.avi", CV_FOURCC('D','I','V','X'), 30,Point(width,height));
	if (!recorder->isOpened() && record){
		return 0;
	}
    #endif
	
	//Construct GUI object
	DebugGUI myGUI = DebugGUI(gui);

	//create image processing objects
	LineFinder imgproc = LineFinder(myGUI.getHSV(),scale);
	imgproc.configWebcam("line");
	if(capture.isOpened()){  //check if we succeeded
			Mat raw;
			//main loop
			while(true){
					#ifdef time
					start_time = GetTimeMs64();
					#endif					
					//Pull a frame from the camera to the raw image
					// capture the current frame
					
					capture >> raw;
					if (gui){					
						imgproc.setFrame(raw.clone());
					}else{
						imgproc.setFrame(raw);	
					}					
					imgproc.setHSV(&myGUI);
					//imgproc.getGray();
					imgproc.thresholdHSV();					
					imgproc.fillHoles();
					//imgproc.findObjects();
					//imgproc.printBiggestObject(raw)
					imgproc.findLines();
					double size =  imgproc.calculateBestGradient();
					LineObject* drawLine = imgproc.calculateErrorLine(height,width);
					if (drawLine != 0){
						lineSize = drawLine->size();
					}else{
						lineSize = 0;
					}
					if (gui){
						imgproc.drawErrorLine(raw,height,width);
						imgproc.printLines(raw);	
					}
					//print (1/(time2-time1))
					
					#ifdef time
					stop_time = GetTimeMs64();
					cout << "FPS: "  <<  1000/(stop_time - start_time) << endl;					
					#else					
					cout << "Gradient: " << size << " " << "Offset: " << lineSize  << endl;
					#endif
					if (gui){
						imshow("Raw",raw);
					}
                    #ifdef RECORD
					if (record){
						recorder->write(raw);
					}
                    #endif
					if(waitKey(30) >= 0){
						return 0;
					}
			}
}else{
	cout << "Ending Program, capture not open" << endl;
}
}


